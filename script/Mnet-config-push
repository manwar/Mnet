#!/usr/bin/perl

=head1 NAME

Mnet::script::Mnet-config-push - network automation script

=cut

# Copyright 2006, 2013-2014 Michael J. Menza Jr.
# Refer to `perldoc Mnet` for more information.

=head1 SYNOPSIS

Usage example:

 Mnet-config-push \
    --batch-list /etc/hosts --batch-hosts \
    --data-dir /data/dir --db-name mnet.db \
    --expect-username cisco --expect-enable \
    --config-push-check '^\s*line vty 0 4' \
    --config-push-commands '
        config term
        line vty 0 4
         password s3cr3t
        end
        write memory
    ' 2>&1 | tee Mnet-config-push.log

=head1 DESCRIPTION

This script used the Mnet perl modules to examine and make changes to
one or more objects.

The batch-list and batch-hosts arguments will instruct the script to
connect to all entries in the system /etc/hosts file for the config
update. Alternatively the object-name and/or object-address arguments
can be used to process a single device.

The expect-username can be set on the command line, instead of being
prompted for when the script starts. The expect-password used for
usermode login and the expect-enable password will be prompted for
when the script runs.

The config-push-check argument is optional. This argument can be set
to a perl regular expression. The example setting '^\s*line vty 0 4'
will look for a line in the current device configuration that starts
with zero or more spaces and the text 'line vty 0 4'. These perl
regualr expressions are case-insensitive and multiline.

If the config-push-check argument is supplied then a match must be
found in the running-config or else the script will gracefully exit
without making any changes.

The config-push-commands argument should be set to one or more lines
of config that will be sent to the device after the config-push-check
is processed.

There is a default config-show option set to 'show running-config'.
This will work for all cisco and cisco-like devices.

There is a default config-error set to the percent sign character.
This character is used by cisco to indicate a problem with command
entry. The script will immediately stop with an error if this pattern
is encountered after any command.

Remember to add a command to save your config. It will only execute
if there were no prior errors. This script stops sending commands if
an error is encountered along the way. The command 'write memory'
will save the updated config on cisco devices.

Note that all log entries are saved to a database if db-name is set.
Also note that all debug log entries are saved in an .err file for a
device if the script exits with an error while processing an object.

Refer to the Mnet::script::Mnet-web-mojo script for displaying output
data from the data-dir directory or the db-name log database.

=head1 CONFIGURATION

Alphabetical list of config settings supported by this script:

 --object-address <addr>       specify address of one object to config
 --object-name <name>          specify name of one object to config
 --batch-list <file>           specify list of objects and addresses
 --batch-hosts                 batch file will be in hosts file format
 --data-dir <directory>        directory for log and error storage
 --db-name <database>          set to save all log entries to database

 --expect-username <user>      login user or null, default prompts
 --expect-enable <1|pass>      set 1 for prompt, default disabled

 --config-push-check <regex>   optional, aborts if regex not in config
 --config-push-commands <cmds> list of one or more enable mode commands
 --config-push-skip            set to skip processing by this script

 --config-error <regex>        match config errors, default '%' for ios
 --config-show <command>       default 'show running-config' for cisco

 --main-version                set at compilation to build number 

Refer to the documentation for the Mnet and Mnet::Expect modules for
a complete list of configuration options.

=cut

# use modules
use warnings;
use strict;
use Mnet;
use Mnet::Expect;


# read object
our $cfg = &object({
    'config-error'      => '%',
    'config-show'       => 'show running-config',
    'main-version'      => '+++VERSION+++',
});

# exit if skip directive is set
if ($cfg->{'config-push-skip'}) {
    &inf("exit early, config-push-skip is set");
    exit;
}

# open session to object
my $session = new Mnet::Expect or die "could not connect to device\n";

# retrieve a copy of the running config
my $show_run = $session->command($cfg->{'config-show'});

# log message if config-push-check is not set
if (not $cfg->{'config-push-check'}) {
    &inf("config-push-check skipped, not set");

# log message and exit if config-push-check didn't match in running config
} elsif ($show_run !~ /$cfg->{'config-push-check'}/mi) {
    &inf("config-push-check did not match, exiting without config push");
    exit;

# log message that config check matched and we will be pushing config
} else {
    &inf("config-push-check matched, will continue with config push");
}

# exit now if config push input is not set
if (not $cfg->{'config-push-commands'}) {
    &inf("config-push-commands not set, exiting now");
    exit;
}

# log that we are starting config push
&inf("config-push starting");

# loop through sending config coommands, exit on errors
foreach my $line (split(/\n/, $cfg->{'config-push-commands'})) {
    $line =~ s/(^\s+|\s+$)//g;
    next if $line !~ /\S/;
    &inf("config-push sending: $line");
    my $output = $session->command($line);
    if (not defined $output) {
         die "output timeout\n";
    } elsif ($cfg->{'config-error'} and $output =~ /$cfg->{'config-error'}/i) {
        die "output error: $output\n";
    }
}

# log that we are done
&inf("config-push finished");

# finished
exit;


=head1 COPYRIGHT AND LICENSE

Copyright 2006, 2013-2014 Michael J. Menza Jr.
Refer to `perldoc Mnet` for more information.

=head1 SEE ALSO

Mnet, Mnet::Expect, Mnet::script::Mnet-web-mojo

=cut

