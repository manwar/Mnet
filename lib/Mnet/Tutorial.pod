=head1 NAME
 
Mnet::Tutorial - network automation scripting tutorial
 
=head1 SYNOPSIS

The Mnet perl network scripting module is supported on unix-like
systems only. Cygwin can be used to run Mnet script on Microsoft
Windows, refer to Mnet::Cygwin for more information.

Download the latest release of the Mnet perl module. Refer to 
the readme file included in the unpacked archive, also posted at
http://menzascripting.com/Documentation/README, for installation
instructions.

=head1 SAMPLE REPORTING SCRIPT

Here's a simple script that can report on what version of code that
an IOS device is running:

 # usage: perl -w sample1.pl - --object-address 10.1.1.1
 use strict;

 # the mnet module handles config, logging, etc for your script
 use Mnet;

 # the mnet expect module is used to telnet or ssh to a device
 use Mnet::Expect;

 # the mnet report module handles output for csv reports
 use Mnet::Report;

 # gather the config for the device we will be working with
 my $cfg = &object;

 # open a telnet or ssh session to the device, abort on error
 my $expect = new Mnet::Expect or die "connect error";

 # run a command on the device
 my $out = $expect->command("show version");

 # report on finding the specified image file in the output
 &report("image", $1) if $out =~ /image file is "\S+:\\*(.+)"/;

 # close the telnet or ssh session to the device
 $expect->close("exit");

 # finished
 exit;

In and of itself that is not a big deal. But the output of any
combination of commands could have been analyzed and reported on.

=head1 NORMAL SCRIPT OUTPUT

The above script can be called with just the --object-address argument
to connect to a single device. You will be prompted for the username
and password that the Mnet::Expect module will use to authenticate to
the device. The output of that script should look similar to this:

 $ perl -w sample1.pl - --object-address 10.1.2.1
 inf 6 10:09:27 mnet object 10.1.2.1 initiated, pid 95181
 inf 6 10:09:27 expect start command 'telnet 10.1.2.1 23'
 Enter 172.26.240.98 expect-username: cisco
 Enter 172.26.240.98 expect-password: 
 Verify 172.26.240.98 expect-password: 
 inf 6 10:09:35 expect logged into 10.1.2.1
 inf 6 10:09:36 report label image = c7200-is-mz.124-8a
 inf 6 10:09:37 mnet script sample1.pl clean exit, 9.2 seconds elapsed

It is possible that you will see other 'inf' (informational) entries.
Some may reference ssh and/or other telnet commands. The script tries
to connect to devices in multiple ways. You can use the additional
argument '--expect-command ssh' (or telnet) to speed things up. You
could even specify a custom connection command. There are settings to
change timeouts, authentication prompting, handling prompts for tokens,
and more. Refer to the Mnet::Expect documentation for a list of these
options.

=head1 SCRIPT ERROR OUTPUT

Output of the script can vary. Look at the last line of normal output
to see if you got an error:

 inf 6 10:39:46 mnet script sample1.pl error exit, 16.1 seconds elapsed

Also look for any summary DIE or WRN messages at the very end of your
script output. Log and alert entries eash have a numeric severity: 7
is debug, 4 is warning, and 0 is critical. Warning entries, or anything
worse, are shown in a summary at the end of the script output.

By default, there will be a lot more output if you get an error. Normal
log entries will be sent to standard output, where you will see one
or more 'WRN' (warning) and/or 'DIE' (aborted) messages. A more detailed
dump to standard error will occur, with lots of 'dbg' (debug) and 'dtl'
(detail) entries. Error output is also saved to an .err file, with the
name sample1.pl.err file in this case. The Mnet module config settings
allow for control over this output. For example, the '--log-level 7'
command line argument can be used to show extra debug entries in the
standard output. These show all the config settings, all the session
activity, etc. Refer to the Mnet module documentation for more log
output options.

=head1 BATCH PROCESSING

It is possible to process a list of devices. One way to do this is
to make a file where each device is specified on a line, like this:

 # save this sample --batch-list file with the name ~/sample.batch
 --object-name hq-r1 --object-address 10.1.2.1 --expect-command telnet
 --object-name dc-r1 --object-address 10.1.1.1
 --object-name dc-s1 --object-address 10.1.2.5

Each line specifies a device. All config settings unique to that device
can be specified on a line. Here we are specifying the object name for
each device, which makes log outputs easier to follow. We also specify
that one of the devices should be connected to via telnet only, skipping
the automatic attempts to try ssh first and then telnet.

To run our sample1.pl script for every device in our batch file, enter
the following command in your unix shell:

 perl -w sample1.pl - --batch-list ~/sample.batch

When you run this script now, it will prompt you once, right away,
and use that authentication for all the devices, one after the other.
The output will show that batch mode has been engaged for a number of
devices, and the log entries for each device are shown.

 $ perl -w sample1.pl - --batch-list ~/sample.batch
 Enter batch-list expect-username: cisco
 Enter batch-list expect-password: 
 Verify batch-list expect-password: 
 inf 6 11:02:57 : mnet batch mode initiated
 inf 6 11:02:57 : mnet read 3 line batch-list sample.batch
 inf 6 11:02:57 hq-r1: mnet object hq-r1 initiated, pid 98713
 inf 6 11:02:57 hq-r1: expect start command 'telnet 10.1.2.1 23'
 inf 6 11:02:59 hq-r1: expect logged into router1
 inf 6 11:03:00 hq-r1: report label image = c7200-is-mz.124-8a
 inf 6 11:03:00 hq-r1: mnet script sample1.pl clean exit, 3.1 seconds
 inf 6 11:03:00 dc-r1: mnet object dc-r1 initiated, pid 98723
 inf 6 11:03:00 dc-r1: expect start command 'telnet 10.1.1.1 23'
 inf 6 11:03:03 dc-r1: expect logged into dc-r1
 inf 6 11:03:04 dc-r1: report label image = c3640-js-mz.122-26
 inf 6 11:03:04 dc-r1: mnet script sample1.pl clean exit, 3.2 seconds
 inf 6 11:03:04 dc-s1: mnet object dc-s1 initiated, pid 98740
 inf 6 11:03:04 dc-s1: expect start command 'telnet 10.1.2.5 23'
 inf 6 11:03:06 dc-s1: expect logged into dc-s1
 inf 6 11:03:07 dc-s1: report label image = 3560-ipbase-mz.122-46
 inf 6 11:03:07 dc-s1: mnet script sample1.pl clean exit, 3.8 seconds
 inf 6 11:03:07 : mnet batch-list processed 3 items in 9.6 seconds
 inf 6 11:03:07 : mnet batch mode exiting
 inf 6 11:03:07 : mnet script sample1.pl clean exit, 17.7 seconds

Batch mode can be really handy. You could add --expect-username and
--expect-password arguments to your command line and not be prompted
for passwords, setting exceptions for devices in the batch-list file.
You could use the --conf-auth setting to specify a secured file that
contains global username and password arguments. You could also use
the --batch-procs option to run through the list with a number of
concurrent processes, to speed things along with a longer list. 

=head1 BETTER REPORT OUTPUT

Try running the report with the --log-quiet flag. This turns off all
log entries to standard output. The reporting module will see this and
output delimited reporting data, one line per device, like this:

 object="hq-r1" image="c7200-is-mz.124-8a"
 object="dc-r1" image="c3640-js-mz.122-26"
 object="dc-s1" image="3560-ipbase-mz.122-46"

We will now specify a database and a data directory on the command
line, as follows (the backslash indicates that the command continues
on the next line):

 perl -w sample1.pl - --batch-list ~/sample.batch --report-csv \
     --db-name sample.sql --data-dir ~/sample.dir

You can look inside the sample.dir data directory and you will see
the following:

 database.sql
 dc-r1/
 dc-s1/
 hq-r1/
 sample1.pl.csv

The specified ~/sample.dir data directory contains all the output for
the sample1.pl script. The sqlite database file is here. The output
.csv report file is here, ready to open into a spreadsheet. A
subdirectory exists for each device specified in the batch-list file.
Any script .err files would here, or in the associated device folder.

The sample1.pl.csv output --report-csv file for this script will look
like this:

 "object", "subitem", "image_file", "error"
 "hq-r1", "", "c7200-is-mz.124-8a", ""
 "dc-r1", "", "c3640-js-mz.122-26", ""
 "dc-s1", "", "3560-ipbase-mz.122-46", ""

Any devices that fail with errors will have something set in the
error column. Additional report calls in the main sample1.pl script
could add other named columns to the report. Refer the the
documentation for the Mnet::Report module for more information.

=head1 SAMPLE POLLING SCRIPT

Now lets try a polling script, something to do some monitoring:

 # usage: perl -w sample2.pl - --batch-list ~/sample.batch \
 #            --mnet--db sample.sql --data-dir ~/sample.dir \
 #            --snmp-community public
 use strict;

 # the mnet module handles config, logging, etc for your script
 use Mnet;

 # the mnet poll module is used for ping and snmp
 use Mnet::Poll;

 # gather the config for the device we will be working with
 my $cfg = &object;

 # poll the current device, enable poll-alerts
 &poll_data({'poll-alerts' => 1});

 # finished
 exit;

Run this script with the following command line, substituting a
valid snmp-community if yours is not set to 'public' for the
devices in your batch-list file:

 perl -w sample2.pl - --batch-list ~/sample.batch \
     --db-name sample.sql --data-dir ~/sample.dir \
     --snmp-community 'public'

This will perform some default polling and alerting on all the devices
listed in the batch-list file. A ping will first be used, then an snmp
read of the standard mib. Interfaces will be checked for basic proper
operation and utilization graphs generated. Cisco devices will be
recognized, and additional information gathered from them. 

The '--batch-repeat 300' command line argument can be added to the
above command to poll all devices listed in the batch-list file every
five minutes, continuously.

There are a lot of options when it comes to polling. The output log
files may have 'ALR' alert entries. The poll_data function may be
combined with Mnet::Expect command calls and the Mnet module alert
function to perform highly customized checks. There are settings for
the Mnet::Poll module to control alert thresholds. Refer to the
documentation for the Mnet::Poll module for more information.

=head1 WEB SERVER OUTPUT

How best to view all the gathered data? That is easy, issue the
following shell command:

 Mnet-web-mojo daemon --listen http://*:8888 - \
     --db-name ~/sample.dir/sample.sql --data-dir ~/sample.dir

This will start up the Mnet-web-mojo script web server listening
on http port 8888. Connect in a web browser to http://127.0.0.1:8888
to view the output web page. Specifying the db-name and data-dir
used by the sample scripts will allow for this script's output data
to be presented in a web interface.

The home page will list reports that have been created, and allow
report data to be explored by column, by device, or an entire report
.csv file can be downloaded.

The alerts page shows current alerts, perhaps from the Mnet::Poll
module. The input areas above the report table headings can be used
to filter data. The alerts are color coded for severity and time,
with more severe and newer alerts near the top and alert times
fading in color as more time goes by.

The logs page shows all log entries for scripts that have saved
data to the specified db-name database. This view can be filters.
Wildcard '*' and '?' characters can be used in filters.

The objects page can show summary information for all objects in
the current dataset. Hit the 'refresh' button with an '*' character
in the object filter field to see some data, and/or try changing the
severity dropdown next to the 'refresh button to 'all'.

On the logs and objects page each device is shown as a link. These
links lead to object data pages. These object data pages have alert
summary data, basic polling data, interface data, graphs, and links
to raw polling data and any script error files.
 
=head1 OTHER POSSIBILITIES

It would be possible to create a script that logs into a device,
issues some commands to change the configuration, tests for new
functionality, logging its progress. The script would use the normal
perl warn and die commands if there were problems. Output files can
be parsed for problems. The data-dir and db-name settings can be
used to save output so that it can be viewed in a web browser, where
log filters can be used to find problems and zoom in on details.

The next step would be to read the Mnet documentation present on the
http://menzascripting.com website. The Mnet module is a good
place to start, learning what options are available to control script
output, the different ways that config settings can be specified,
and how scripts can handle large numbers of devices.

After that the Mnet::Expect module is the next most useful. This
module is used to connect to other devices via ssh and/or telnet.
Its behaviour can be customized, even on a per device basis (using
per-device settings in an batch-list file). Complex commands with
prompting can be handled, timeouts adjusted, authentication prompts
can be customized if need be, etc.

The Mnet::Expect module has the ability to record and replay command
line sessions to a device, use the --expect-record and --expect-replay
configuration settings. These are invaluable, allowing for regression
testing of complex scripts as they are being developed.

The Mnet::Poll module handles basic device monitoring and allows for
complex custom monitoring systems to be developed. In addition, it
is easy to adjust some of the alert threshold settings - they are
all listed.

Using the techniques from this tutorial it is possible to create
network automation scripts that perform advanced custom reporting,
monitoring and change automation functions.

=head1 COPYRIGHT AND LICENSE

Copyright 2006, 2013-2014 Michael J. Menza Jr.
Refer to `perldoc Mnet` for more information.

=head1 SEE ALSO

Mnet, Mnet::Cygwin, Mnet::Expect, Mnet::Poll, Mnet::Report, 
Mnet::script::Mnet-web-mojo

=cut
