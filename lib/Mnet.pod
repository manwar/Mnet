
=head1 NAME

Mnet

=head1 SYNOPSIS

The Mnet modules are for perl programmers who want to create network
automation, reporting, and monitoring scripts.

Here's some sample code showing typical usage:

    # use the logging module,
    use Mnet::Log qw(DEBUG INFO WARN FATAL);

    # use the cli option parsing module
    use Mnet::Opts::Cli;

    # use the test record/replay module
    use Mnet::Test;

    # define a cli option for this script
    Mnet::Opts::Cli::define({
        getopt   => "sample:s",
        help_tip => "string cli option",
    });

    # parse cli options
    my $cli = Mnet::Opts::Cli->new;

    # here's a bit of example code
    INFO("sample option set") if $cli->sample;

Refer to the TUTORIAL below to see what can be done with the above code, and
the SEE ALSO section of this perldoc for a complete list of Mnet perl modules.

=head1 TUTORIAL

#? finish tutorial
#   be sure to show use of all main modules, including Mnet::Batch

=cut

#? proofread and revise all perldoc and comments

#? finish Mnet::Expect module, refer to to-do notes in that module

#? create Mnet::Data module
#   $row = Mnet::Data->row(\%opts, $row, $table)
#       opts --data:s=sqlite, dir for filesys, - for stdout, or null for memory
#           sqlite can be used if available, memory data stored using perl hash
#           data dir has table sub-dirs, row sub-dirs, and column files
#           stdout outputs table/row/column:value, same as grep -R --data dir .
#           or stdout outputs sql insert statements, can be parsed or fed to db
#       row must be set to a unique row name, used for dir and memory --data
#           set row to unique device name, otherwise always updates default row
#       table can be set to table name, used for sqlite, dir, and memory --data
#   $row->set($column, $value) can use to set specified column data in row
#   $value = $row->get($column) can use to retrieve specified column data
#   $row->dump($column, $value) can use to store data in Data::Dumper format
#   $value = $row->eval($column) can use to get data saved with dump method
#   note that get/set can't store undef and data structures like dump/eval
#   maybe end block saves/updates data, unless read-only or memory opts are set
#       end commit is efficient, can we get/eval from memory w/fallback to db?
#   do we need a way to remove or age out old data?
#   how do we know what columns to create in sqlite tables?
#       maybe alter table to add columns? but what about indexes?
#       maybe sqlite --data requires that tables/indexes already be created
#   is this module good enough? is output easy as csv? what would be better?

=head1 AUTHOR

The Mnet perl module has been created and is maintained by Mike Menza. Mike can
be reached via email at mmenza@cpan.org.

=head1 COPYRIGHT AND LICENSE

Copyright 2006, 2013-2018 Michael J. Menza Jr.

Mnet is free software: you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/

=head1 SEE ALSO

 Mnet::Batch
 Mnet::Dump
 Mnet::Expect
 Mnet::Expect::Cli
 Mnet::Expect::Cli::Cisco
 Mnet::Log
 Mnet::Opts::Cli
 Mnet::Opts::Set::Debug
 Mnet::Opts::Set::Quiet
 Mnet::Opts::Set::Silent
 Mnet::Test

=cut

